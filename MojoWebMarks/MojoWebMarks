#!/usr/bin/env perl -wT

use Mojolicious::Lite;
require "/home/angus/perlProjects/MojoWebMarks/JJExecPageSQL.pl";
require "/home/angus/perlProjects/MojoWebMarks/SQLStrings.pl";
use lib '/home/angus/perlProjects/MojoWebMarks';
use lib '/home/angus/dcoda_net/private/webMarks/script_src';
use GenMarksMojo;
#############################
#external dependencies below 
#amongst others
#||||||||||||||
#VVVVVVVVVVVVVV
use Util;
use Error;
use DbConfig;

###################
# templates#####
# t-> mainview  => called now by class methods		|	
# t-> defaultpage  => called now by class methods 	| of GenMarksMojo class 
# t-> registration  => called now by class methods	|
###################


our %tabMap = ('tab_AE',1,'tab_FJ',2,'tab_KP',3,'tab_QU',4,'tab_VZ',5,'tab_SRCH_TITLE',6,'tab_SRCH_URL',7,'tab_SRCH_DATE',8,'tab_DATE',9,'searchBox',10);
our $DEBUG;
our $NO_HEADER;


###### Global Database Handle ##########################################################
# switching to main package which is available interpreter wide ####
package main 
{
	our $dbc = DbConfig->new("/home/angus/perlProjects/MojoWebMarks/stockDbConfig.dat");
#	our $dbc = DbConfig->new();
	our $dbh = $dbc->connect()
		or GenError->new(Error->new(102))->display() and 
				die "Cannot Connect to Database $DbConfig::errstr\n";
	require '/home/angus/dcoda_net/cgi-bin/webMarks/cgi-bin/gen_histo_gram_multi.pl';
}
##########################################################################################

############################################
# AuthorizeCred was put before general *under* method to AVOID *under* call
# post '/authorizeCred' => \&authorCredFunc;
############################################
post '/authorizeCred' => \&authorCredFunc;

## mojo method prepended to all routing methods
## must come before other routing methods to be effective
########
under '/' =>  sub {
########
########
######## perl $_[0] arg var contains the Mojo controller
	$_[0]->stash(userName =>"", errText => "", displayText => "");
	###################
	#validate session
	#################
	if (sessionReady($_[0])) 
	{
		#Session exists proceed to other routes
		#######################################
		print STDERR $_[0]->session->{wmUserID} , "User ID \n ";
    	return 1;
	} 
	else 
	{
		my $c = shift;
		$c->stash( colorStyle=>"red", displayText=>"", errText => "");
		if ($c->match->endpoint->name =~ /registration/) 
		{ 	
			#?? GenMarksMojo->new()->renderRegistrationView();
			$c->render(template=> 'class_registration', format => 'html'); 
			return 1;
		} 
		else
        {
			#?? GenMarksMojo->new()->renderDefaultView();
			$c->render(template=> 'class_defaultpage', format => 'html');
		}  
	return undef;
	}
};

###############################################################
############# Mojo Routes #####################################
###############################################################
get '/registration' => \&registration;
get '/' =>  \&index;
get '/webMarks' =>  \&index;
get '/logout' => \&logout;
get '/tabView' =>  \&index;
post '/searchWB' => \&indexSearch;
post '/registrationAuth' => \&regAuth;
post '/insertMark' => \&insert_mark;
post 'deltaPass' => \&deltaPass;
##############################################################

### Helper Methods for routes ###############################
# mojo methods used in conjunction with routing methods; must 
# be "helper"ed to use # within mojolicious routes/controller;
helper pre_auth => \&pre_auth;
helper authorize => \&authorize;
helper mod_passwd => \&mod_passwd;
helper sessionReady => \&sessReady;
helper renderMainView => \&renderMainView;
helper exec_page => \&exec_page;
helper gen_optionListDiv => \&main::gen_optionListDiv;
#############################################################

#############################################################
# Mojo Routing methods
#############################################################
sub index {
	my $c = shift;	# the mojolicious controller object
					# first arg to routing methods
	print STDERR "HelloWorld index\n";
	#?? GenMarksMojo->new()->renderMainView();
	$c->renderMainView();
}

sub indexSearch {
	my $c = shift;
	print STDERR "HelloWorld index\n";
	#?? GenMarksMojo->new()->renderMainView();
	$c->renderMainView();
}

sub logout {
	my $c = shift;
	###########################
	#delete/expire  mojo session/cookies
	$c->session(expires => 1);
	###########################

	$c->stash( colorStyle=>"red", displayText=>"", errText => "");
	$c->render(template=> 'class_defaultpage', format => 'html');
	#$c->renderDefaultView();	
	return 1;
}

sub registration
{
	my $c = shift;
	#?? GenMarksMojo->new()->renderRegistrationView();
	$c->render(template => 'class_registration', format => 'html');


}

sub regAuth
{
	my $c = shift;

	my $callObj = Util::formValidation($c);	
	print STDERR $callObj, " call objects \n";
	print STDERR $callObj->{ERRCOND}, " error call objects \n";
		
	if(ref $callObj eq 'Error')
	{
		$c->stash( errText => "Failed Validation");
		$c->render(template => 'class_registration', format => 'html') 
		#GenMarks->new()->genRegistration($callObj);
	}
	else
	{
		my $sqlHash = $callObj;
		my $local_user_name = $sqlHash->{userName}; 
		my $partUserName = substr($sqlHash->{userName},0,5); 
		my $partID = substr(genSessionID(),0,5);
		my $userID = $partUserName."_".$partID;

		my $insert_sql_str = "INSERT INTO WM_USER (USER_ID,USER_NAME,USER_PASSWD,EMAIL_ADDRESS) VALUES (" . 
			"'$userID','$sqlHash->{userName}','$sqlHash->{password}','$sqlHash->{email}')";

		eval {
	
			my $sth = $::dbh->prepare($insert_sql_str);
			$sth->execute();

		};

		if ($@) 
		{
			$c->stash( errText => "Failed User Creation");
			$c->render(template => 'class_defaultpage', format => 'html'); 
			#GenMarks->new()->genRegistration(Error->new(120));
		}
		else
		{
			#authorize()
			$c->stash( colorStyle => "black", userName => $local_user_name, displayText => "Registration Successful");
			$c->render(template => 'class_defaultpage', format => 'html') 
			#GenMarks->new()->genDefaultPage("Registration Successful: $local_user_name");		
				
		}
	}
}

sub authorCredFunc
{
	my $c = shift;
	my ($user_id,$user_name) = $c->pre_auth();
	print STDERR $user_id , " User ID " . @{[caller(2)]}[3] . " \n";
	#!!!additional logic for already present session needed
	######################################################
 	if(defined($user_id))
	{   
 		$c->authorize($user_id,$user_name);
	}
	else
	{   
		$c->stash(colorStyle => "black", userName => "", displayText => ""); 
		$c->render(template => 'class_defaultpage', format => 'html');
		return 0;
	}
	print STDERR $user_id , " MainView\n";
		$c->renderMainView();
		#$c->stash(tabMap => \%tabMap);
		#$c->render(template => 'mainview', format => 'html');
		return 1;
}

# Mojo Code of insert_mark is different than CGI code version
##############################################
sub insert_mark
{
	my $c = shift;
	my $user_id = $c->session('wmUserID');
	my $title = $c->param('mark_title');
	my $url = $c->param('mark_url');
    print STDERR $title, " mk title\n";
    print STDERR $url, " mk URL\n";

	return Error->new(151) if ((not isset($title)) || (not isset($url)));

	my $unix_epochs = time;	
	#use antique mozilla time format (1000 * 1000) unix epoch seconds => microseconds 
	my $dateAdded = $unix_epochs * (1000 * 1000);

	my $dbc = DbConfig->new();

	 my $local_dbh = $dbc->connect()
		or GenError->new(Error->new(102))->display() and die "Cannot Connect to Database $DbConfig::errstr\n";


	my ($tbl1MaxId) = $local_dbh->selectrow_array("select max(BOOKMARK_ID) from WM_BOOKMARK");
	my ($tbl2MaxId) = $local_dbh->selectrow_array("select max(PLACE_ID) from WM_PLACE");

	$tbl1MaxId++;
	$tbl2MaxId++;


	#Duplicate URL check => if so fail out to index reporting URL already exists;
	# If no duplicate go ahead and insert into database WM_PLACE
	#############################################################################
	my ($dup_wm_place_url) = $local_dbh->selectrow_array("select b.url from WM_BOOKMARK a, WM_PLACE b where a.PLACE_ID = b.PLACE_ID and a.USER_ID = '$user_id' and b.URL = " . $local_dbh->quote($url) );
	if (defined($dup_wm_place_url)) {
		$c->renderMainView(Error->new(150));
		return 0;
	}


	my $rc = $local_dbh->do("insert into WM_PLACE (PLACE_ID, URL, TITLE) values ($tbl2MaxId," . $local_dbh->quote($url) . ", " . $local_dbh->quote($title) . ")" );
	print STDERR "RCODE1 => $rc\n" if($DEBUG);

	if(not defined($rc)) {
		print STDERR "Failed DB Operation: $DBI::errstr\n" if($DEBUG);
		$local_dbh->disconnect;
		$c->renderMainView(Error->new(150)); 
		return 0;
	}
	
	#Insert into WM_BOOKMARK the same  URL for WM_PLACE
	####################################################
	my $rc2 = $local_dbh->do("insert into WM_BOOKMARK (BOOKMARK_ID, USER_ID, PLACE_ID, TITLE, DATEADDED) values ($tbl1MaxId, '$user_id', $tbl2MaxId," . $local_dbh->quote($title) . ", '$dateAdded' ) " );

	print STDERR "RCODE2 => $rc2\n" if($DEBUG);

	if(not defined($rc2)) {
		print STDERR "Failed DB Operation: $DBI::errstr\n" if($DEBUG);
		$local_dbh->disconnect;
		$c->renderMainView(Error->new(150)); 
		return 0;
	}
	$c->renderMainView();
	return 1;
}

sub deltaPass
{
	my $c = shift;
    my ($usr_id,$usr_name,$usr_pass) = $c->pre_auth();

    if(not defined($usr_name))
    {
        $c->renderMainView(Error->new(112));   
    }
    else
    {
        my $rc = $::dbh->do("update WM_USER set user_passwd='" . $usr_pass . "'  where user_name='" . $usr_name . "' ");
        if(not defined($rc))
        {
            $c->renderMainView(Error->new(2000));   
        }
        else
        {
            $c->renderMainView();   
       }
    }

}
#########################################
# End of Mojo Routing methods
#########################################

#helper method
sub pre_auth
{
    my $c = shift;
	my $usr_name = $c->param('user_name');
	my $usr_pass = $c->param('user_pass'); 
	my $old_usr_pass = $c->param('old_pass'); #only for update
	my $exec_sql_str;
	
	if(defined($old_usr_pass)) {
		$exec_sql_str = "select user_id, user_name from WM_USER where user_passwd = '" . $old_usr_pass . "' and user_name ='" . $usr_name . "' ";
	} else {
		$exec_sql_str = "select user_id, user_name from WM_USER where user_passwd = '" . $usr_pass . "' and user_name ='" . $usr_name . "' ";
	}

	### error checking ????? ##############
	my $sth = $::dbh->prepare($exec_sql_str);
	$sth->execute();
	my @user_row = $sth->fetchrow_array;
	my $row_count = $sth->rows;
	### error checking ????? ##############
	print STDERR  $$, "###### ", $user_row[1], " BOOOO #########\n" if($DEBUG);
	return ($user_row[0],$user_row[1],$usr_pass);
}


#helper method
sub authorize
{
	my $c = shift;
	print STDERR $c , " Controller  \n";
	my $host = undef;
	my $user_id = shift;
	my $user_name = shift;
	my $sessionID = genSessionID();
	my $init_count = 0;
	my $init_date_count = 0;
	my $init_tab_state = 0;

	$c->session->{wmSessionID} = $sessionID;
	$c->session->{wmUserID} = $user_id;
	$c->session->{wmUserName} = $user_name;
	$c->session->{Counter} = $init_count;
	$c->session->{tab_state} = $init_tab_state;
	$c->session->{dt_cnter} = $init_date_count;
	$c->session(expires => undef);
	$c->session(domain => undef);
	my $sessionInstance = 'sess1';
#	$c->render(template => "mainview", format => "html")

}

#helper method
sub renderMainView
{
	my $c = shift;
	my $errObj = shift;
	$c->stash(tabMap => \%tabMap);
	#JJExecPageSQL.pl
	$c->exec_page($errObj);
}

#helper method
sub tabTable 
{
    return;	
}

#helper method
sub sessionReady
{
	my $c = shift;
	my $sessionID = $c->session->{wmSessionID}; 
	if (defined($sessionID) && ($sessionID !~ /^\s*\t*$/)) 
	{
		print STDERR $sessionID, " SessionID \n"; 
		print STDERR $c->session->{wmUserID}, " User ID \n"; 
		return 1;
	}
	else
	{
		return 0;
	}
}

app->start;
